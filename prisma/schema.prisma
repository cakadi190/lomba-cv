// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// # For Education # //
model educations {
  id           String    @id @default(uuid())
  name         String
  logo         String?
  web          String?
  level        String
  grade        String?
  department   String?
  studyProgram String?
  start        DateTime
  end          DateTime?
  place        String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt
}

// # For Organization EXP # //
model organizations {
  id         String   @id @default(uuid())
  orgName    String
  desc       String?
  period     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

// # For Career EXP # //
model careers {
  id         String          @id @default(uuid())
  position   String
  company    String
  location   String
  startDate  DateTime
  endDate    DateTime?
  portfolios PortfolioLink[]
  created_at DateTime        @default(now())
  updated_at DateTime        @default(now()) @updatedAt
}

// # For Portfolio # //
model portfolios {
  id               String                @id @default(uuid())
  name             String
  slug             String                @unique
  image            String
  techstack        Json
  shortDesc        String?
  desc             String?
  demoLink         String?
  sourceCode       String?
  private          Boolean               @default(false)
  categories       PortfolioCategory[]
  careerExperience PortfolioLink[]
  ratings          portfolio_ratings[]
  galleries        portfolio_galleries[]
  created_at       DateTime              @default(now())
  updated_at       DateTime              @default(now()) @updatedAt
}

// # For Portfolio Categories # //
model portfolio_categories {
  id         String              @id @default(uuid())
  name       String
  color      String?
  portfolios PortfolioCategory[]
  created_at DateTime            @default(now())
  updated_at DateTime            @default(now()) @updatedAt
}

// # For Award EXP # //
model awards {
  id         String    @id @default(uuid())
  event      String
  award      String
  icon       String?
  year       Int
  rank       Int?
  date       DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
}

// Relation Models
model PortfolioLink {
  id          String      @id @default(uuid())
  portfolio   portfolios? @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String?
  career      careers?    @relation(fields: [careerId], references: [id], onDelete: Cascade)
  careerId    String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt
}

model PortfolioCategory {
  id          String                @id @default(uuid())
  portfolio   portfolios?           @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String?
  category    portfolio_categories? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String?
  created_at  DateTime              @default(now())
  updated_at  DateTime              @default(now()) @updatedAt
}

// # For Portfolio Ratings # //
model portfolio_ratings {
  id          String     @id @default(uuid())
  rating      Int
  comment     String?
  portfolio   portfolios @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt
}

// # For Portfolio Galleries # //
model portfolio_galleries {
  id          String     @id @default(uuid())
  imageUrl    String
  description String?
  portfolio   portfolios @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt
}

enum WifiSpeed {
  WEAK
  MEDIUM
  STRONG
}

enum CafePrice {
  CHEAP
  MEDIUM
  EXPENSIVE
}

// # For Coffee Places # //
model coffee_places {
  id             String    @id @default(uuid())
  name           String
  address        String
  description    String?
  map_coordinate String?
  map_url        String?
  image          String?
  wifi_provider  String?
  wifi_speed     WifiSpeed @default(STRONG)
  price          CafePrice @default(CHEAP)
  park_fee       BigInt?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt
}
